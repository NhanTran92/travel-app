{"ast":null,"code":"import axios from \"axios\";\nimport stogare from \"../Stogare/Stogare\";\nconst httpClient = axios.create({\n  baseURL: `http://localhost:8080/api/v1`,\n  responseType: \"json\"\n});\n// Add a request interceptor\nhttpClient.interceptors.request.use(function (request) {\n  // Do something before request is sent\n  // const token = localStorage.getItem(\"token\")\n  //   ? JSON.parse(localStorage.getItem(\"token\"))\n  //   : null;\n  // if (token) {\n  //   request.headers[\"Authorization\"] = \"Bearer\" + token;\n  // }\n  const token = stogare.getToken();\n  if (token !== null && token !== undefined) {\n    request.headers.Authorization = token;\n  }\n  return request;\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n});\n\n// Add a response interceptor\nhttpClient.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  return response;\n}, function (error) {\n  // Any status codes that falls outside the range of 2xx cause this function to trigger\n  // Do something with response error\n  return Promise.reject(error);\n});\nexport default httpClient;","map":{"version":3,"names":["axios","stogare","httpClient","create","baseURL","responseType","interceptors","request","use","token","getToken","undefined","headers","Authorization","error","Promise","reject","response"],"sources":["D:/VTI/Exam/Ral62/testing/src/Api/httpClient.js"],"sourcesContent":["import axios from \"axios\";\r\nimport stogare from \"../Stogare/Stogare\";\r\n\r\nconst httpClient = axios.create({\r\n  baseURL: `http://localhost:8080/api/v1`,\r\n  responseType: \"json\",\r\n});\r\n// Add a request interceptor\r\nhttpClient.interceptors.request.use(\r\n  function (request) {\r\n    // Do something before request is sent\r\n    // const token = localStorage.getItem(\"token\")\r\n    //   ? JSON.parse(localStorage.getItem(\"token\"))\r\n    //   : null;\r\n    // if (token) {\r\n    //   request.headers[\"Authorization\"] = \"Bearer\" + token;\r\n    // }\r\n    const token = stogare.getToken();\r\n    if (token !== null && token !== undefined) {\r\n      request.headers.Authorization = token;\r\n    }\r\n    return request;\r\n  },\r\n  function (error) {\r\n    // Do something with request error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor\r\nhttpClient.interceptors.response.use(\r\n  function (response) {\r\n    // Any status code that lie within the range of 2xx cause this function to trigger\r\n    // Do something with response data\r\n    return response;\r\n  },\r\n  function (error) {\r\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\r\n    // Do something with response error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default httpClient;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,oBAAoB;AAExC,MAAMC,UAAU,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC9BC,OAAO,EAAG,8BAA6B;EACvCC,YAAY,EAAE;AAChB,CAAC,CAAC;AACF;AACAH,UAAU,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACjC,UAAUD,OAAO,EAAE;EACjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAME,KAAK,GAAGR,OAAO,CAACS,QAAQ,CAAC,CAAC;EAChC,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKE,SAAS,EAAE;IACzCJ,OAAO,CAACK,OAAO,CAACC,aAAa,GAAGJ,KAAK;EACvC;EACA,OAAOF,OAAO;AAChB,CAAC,EACD,UAAUO,KAAK,EAAE;EACf;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,UAAU,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAClC,UAAUS,QAAQ,EAAE;EAClB;EACA;EACA,OAAOA,QAAQ;AACjB,CAAC,EACD,UAAUH,KAAK,EAAE;EACf;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}